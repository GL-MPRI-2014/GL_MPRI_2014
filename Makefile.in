# @configure_input@

# TODO :
# * make doc generate some warning (since the merge of music). Why ? Fix the issue
# * the targets dist and doc are not *generic*.

#variable from configure
package = @PACKAGE_NAME@
version = @PACKAGE_VERSION@
tarname = @PACKAGE_TARNAME@
distdir = $(tarname)-$(version)

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
resourcesdir = @datadir@

#VPATH variable
#VPATH allow to build the project in other tree than were
#are located the original sources files
#not supported by ocamlbuild because ocamlbuild
#do not support relative path, WTF ?!?
#srcdir = @srcdir@
#VPATH = @srcdir@

#where are located files
src_root=src

resources_dir=resources
documentation_dir=doc
engine_dir=$(src_root)/engine
common_dir=$(src_root)/common
utils_dir=$(src_root)/common/utils
config_dir=$(src_root)/common/config
interface_dir=$(src_root)/interface
gui_dir=$(interface_dir)/gui
network_dir=$(src_root)/network
music_dir=$(src_root)/music
script_dir=$(src_root)/script

test_dir=test
# $(network_dir) removed for now
dirs = $(engine_dir) $(common_dir) $(utils_dir) $(config_dir) $(interface_dir) $(gui_dir) $(music_dir) $(script_dir)

#for each target, the directories concerned for ocamlbuild
engine_src=$(network_dir),$(engine_dir),$(common_dir),$(utils_dir),$(config_dir),$(script_dir)
interface_src=$(engine_dir),$(common_dir),$(utils_dir),$(config_dir),$(interface_dir),$(gui_dir),$(music_dir),$(network_dir),$(script_dir)
network_src=$(network_dir),$(common_dir),$(utils_dir),$(config_dir)
script_src=$(common_dir),$(utils_dir),$(script_dir),$(config_dir)

test_src=test,$(engine_src),$(interface_src)

#dependencies required for each target
common_dependencies = atdgen,dolog,unix
engine_dependencies = $(common_dependencies),threads
music_dependencies = num,ocsfml.audio,mm,pulseaudio
script_dependencies = $(common_dependencies)


#music dependencies must be before ocsfml.graphics otherwise ocamlbuild fail.
interface_dependencies = bigarray,threads,$(music_dependencies),ocsfml.graphics,$(common_dependencies)
#network_libraries = unix

test_dependencies=$(engine_dependencies),$(interface_dependencies),oUnit

#tags needed for each target
interface_tags = thread
engine_tags = thread

#compiler flags
cflags = -w,-3

#name of the target for ocamlbuild
output_interface = main.native
output_profile = main.p.native
output_script = script.native
output_engine = dummy_serv.native
output_gprof = profile



command = ocamlbuild -use-ocamlfind -cflags $(cflags) -use-menhir -yaccflag --explain

interface_command =	$(command) $(menhir_command) -Is $(interface_src) -package $(interface_dependencies) $(output_interface) -tag $(interface_tags)

profile_command =	$(command) $(menhir_command) -Is $(interface_src) -package $(interface_dependencies) $(output_profile) -tag $(interface_tags)

gprof_command = gprof $(output_profile) gmon.out >> $(output_gprof)

script_command = $(command) $(menhir_command) -Is $(script_src) -package $(script_dependencies) $(output_script)

engine_command = $(command) -Is $(engine_src) -package $(engine_dependencies) $(output_engine) -tag $(engine_tags)

network_command = $(command) -Is $(network_src) $(output_network)

#get every source file of the project
#needed for the target doc
find_ml_files = $(wildcard $(dir)/*.ml)
find_mli_files = $(wildcard $(dir)/*.mli)
files := $(foreach dir,$(dirs),$(find_ml_files) $(find_mli_files))


###########################################
#    Generate .ml files from .atd files   #
###########################################

# atd files
%_t.ml: %.atd
	atdgen -t $<
%_j.ml: %.atd
	atdgen -j $<
%_v.ml: %.atd
	atdgen -v $<


###########################################
#  get all the atd files in the project   #
###########################################

#temporary solution : find a way toreplace src/common
find_files_atd = $(wildcard $(dir)/*.atd)

files_atd := $(foreach dir,$(dirs),$(find_files_atd))
files_atd_ml := $(files_atd:.atd=_t.ml) $(files_atd:.atd=_j.ml) $(files_atd:.atd=_v.ml)
files_atd_mli := $(files_atd_ml:.ml=.mli)

find_files_t_ml = $(wildcard $(dir)/*_t.ml)
files_atd_t := $(foreach dir,$(dirs),$(find_files_t_ml))
all_files_atd_ml := $(files_atd_t) $(files_atd_t:_t.ml=_j.ml) $(files_atd_t:_t.ml=_v.ml)
all_files_atd_mli := $(files_atd_ml:.ml=.mli)

interface: $(files_atd_ml)
	$(interface_command)

run: interface
	./$(output_interface)

engine:  $(files_atd_ml)
	$(engine_command)

script: $(files_atd_ml)
	$(script_command)

profile: $(files_atd_ml)
	$(profile_command)
	./$(output_profile)
	$(gprof_command)


#variable DESTDIR is useful for distcheck and more generally if you want to change the directory for installation.
install:
	install -d "$(DESTDIR)$(bindir)"
	-install -m 0755 $(output_interface) "$(DESTDIR)$(bindir)/ocawai"
	-install -m 0755 $(output_engine) "$(DESTDIR)$(bindir)"
	-install -m 0755 $(output_network) "$(DESTDIR)$(bindir)"
	mkdir -p $(DESTDIR)$(resourcesdir)/ocawai/
	cp -R ./resources/* $(DESTDIR)$(resourcesdir)/ocawai/
	chmod 777 -R $(DESTDIR)$(resourcesdir)/ocawai/

uninstall:
	-rm $(DESTDIR)$(bindir)/ocawai
	-rm $(DESTDIR)$(bindir)/$(output_engine)
	-rm $(DESTDIR)$(bindir)/$(output_network)
	-rm $(DESTDIR)$(bindir)/$(output_script)
	-rm -Rf -- $(DESTDIR)$(resourcesdir)/ocawai



dist: $(distdir).tar.gz


#option h is for deference symlinks
$(distdir).tar.gz: $(distdir)
	tar chf - $(distdir) | gzip -9 -c > $@
	rm -rf $(distdir)

#create the archive
$(distdir): FORCE
	mkdir -p $(distdir)/src
	mkdir $(distdir)/$(common_dir)
	mkdir $(distdir)/$(utils_dir)
	mkdir $(distdir)/$(config_dir)
	mkdir $(distdir)/$(engine_dir)
	mkdir $(distdir)/$(interface_dir)
	mkdir $(distdir)/$(gui_dir)
	mkdir $(distdir)/$(network_dir)
	mkdir $(distdir)/$(resources_dir)
	mkdir $(distdir)/$(music_dir)
	mkdir $(distdir)/$(test_dir)
	mkdir $(distdir)/$(script_dir)
	cp Makefile.in $(distdir)
	cp README.md $(distdir)
	cp configure.ac $(distdir)
	cp configure $(distdir)
	cp install-sh $(distdir)
	cp $(common_dir)/*.ml* $(distdir)/$(common_dir)
	cp $(common_dir)/*.atd $(distdir)/$(common_dir)
	cp $(utils_dir)/*.ml* $(distdir)/$(utils_dir)
	cp $(config_dir)/*.ml* $(distdir)/$(config_dir)
	cp $(config_dir)/*.atd $(distdir)/$(config_dir)
	cp $(engine_dir)/*.ml* $(distdir)/$(engine_dir)
	cp $(interface_dir)/*.ml* $(distdir)/$(interface_dir)
	cp $(script_dir)/*.ml* $(distdir)/$(script_dir)
	cp $(gui_dir)/*.ml* $(distdir)/$(gui_dir)
	cp $(music_dir)/*.ml* $(distdir)/$(music_dir)
	cp $(network_dir)/*.ml* $(distdir)/$(network_dir)
	cp $(test_dir)/*.ml $(distdir)/$(test_dir)
	cp -R $(resources_dir)/* $(distdir)/$(resources_dir)

#check that distdir create a correct archive
distcheck: $(distdir).tar.gz
	gzip -cd $(distdir).tar.gz | tar xvf -
	cd $(distdir) && ./configure
	#cd $(distdir) && $(MAKE) network
	cd $(distdir) && $(MAKE) engine
	cd $(distdir) && $(MAKE) interface
	cd $(distdir) && $(MAKE) check
	cd $(distdir) && $(MAKE) install DESTDIR="$${PWD}/_inst"
	cd $(distdir) && $(MAKE) uninstall DESTDIR="$${PWD}/_inst"
	#check if uninstall works
	@remaining="`find $${PWD}/$(distdir)/_inst -type f | wc -l`"; \
	if test "$${remainning}" -ne 0; then \
		echo "*** $${remaining} file(s) remaining in temporary install directory!"; \
		exit 1; \
	fi
	cd $(distdir) && $(MAKE) clean
	rm -rf  $(distdir)
	@echo "*** Package $(distdir).tar.gz is ready for distribution"

#if an old archive is already there. Delete it to make a new one
FORCE:
	-rm $(distdir).tar.gz > /dev/null 2>&1
	-rm -rf $(distdir) > /dev/null 2>&1

#recompile the Makefile if you change something in Makefile.in
#without start over configure
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck


#Generate documentation -I _builld/$(network_dir) removed for now
doc: interface engine
	mkdir -p $(documentation_dir)
	ocamlfind ocamldoc -stars -package $(interface_dependencies) -d doc \
	-t "Projet_Genie_Logiciel_MPRI_2014" \
	-I _build/$(common_dir) -I _build/$(utils_dir) -I _build/$(config_dir) -I _build/$(interface_dir) -I _build/$(gui_dir) \
	-I _build/$(engine_dir) -I _build/$(music_dir) -I _build/$(script_dir) -I _build/$(network_dir) \
	-I -thread -thread -html -colorize-code $(files)
	rm -f documentation.html
	ln -s doc/index.html documentation.html


clean:
	ocamlbuild -clean
	rm -f $(all_files_atd_ml) $(all_files_atd_mli)
	-rm -f $(documentation_dir)/*.html $(documentation_dir)/*.css
	-test \! -e doc || rmdir doc
	rm -f documentation.html
	rm -f resources/config/settings.json
	rm -f resources/config/settings_engine.json
	rm -f resources/config/settings_interface.json
	rm -f $(output_gprof)
	rm -f gmon.out

check_generation: engine
	ocamlbuild -use-ocamlfind -cflags $(cflags) -Is $(test_src) -package $(test_dependencies) generation_test.native -tag $(engine_tags)
	#ocamlfind ocamlc -o player_test -package oUnit -linkpkg -g test/player_test.ml
	./generation_test.native

check_player: engine
	ocamlbuild -use-ocamlfind -cflags $(cflags) -Is $(test_src) -package $(test_dependencies) player_test.native -tag $(engine_tags)
	#ocamlfind ocamlc -o player_test -package oUnit -linkpkg -g test/player_test.ml
	./player_test.native

check_logics: engine
	ocamlbuild -use-ocamlfind -cflags $(cflags) -Is $(test_src) -package $(test_dependencies) logics_test.native -tag $(engine_tags)
	./logics_test.native

check_interface: interface
	ocamlbuild -use-ocamlfind -cflags $(cflags) -Is $(test_src) -package $(test_dependencies) interface_test.native -tag $(interface_tags)
	./interface_test.native

check: check_player check_generation check_logics check_interface

.PHONY: FORCE all clean dist distcheck engine interface network script
